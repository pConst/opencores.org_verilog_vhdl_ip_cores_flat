<!--# set var="title" value="Title" -->
<!--# include virtual="/ssi/ssi_start.shtml" -->
<b><font size=+2 face="Helvetica, Arial"color=#bf0000>Project: memory_sizer</font></b><p><table  align=center border=1 cellPadding=2 cellSpacing=0 width="100%" valign="top"><tbody><tr bgcolor=#bbccff>    <td align=center valign=center>
<a href="./index.shtml">Overview</a>               |
<a href="./people.shtml">People</a>               |
<a href="./documentation.shtml">Documentation</a>               |
<a href="./download.shtml">Download</a>               |
<a href="mailto:cores@opencores.org">OpenCores Mail list</a>               |
<a href="mailto:jclaytons@earthlink.net">Contact me</a>    </td></tr></tbody></table>
<p><center><font  color="#bf0000" size=+3> <b>Download</b></font></center></p>
<p><font color="#2080bf" size=+1> <b>Allright, here are "the goods!"</b></font></p>
<font >
<p>Downloads:</p>
<p></p>
<p><a href="./memory_sizer.v">memory_sizer.v</a>.  This file contains the memory_sizer module Verilog code.
</p></font>
<a href="./memory_sizer_dual_path.v">memory_sizer_dual_path.v</a>.
This file contains the memory_sizer_dual_path Verilog code.
<br><br>
<a href="./b10_safe_12_18_01_single_path.zip">b10_safe_12_18_01_single_path.zip</a>.
This file contains an example of the memory_sizer module in use.  It uses tri-state buffers to switch buses, so it re-uses the same byte reversal and byte steering logic for both reads and writes.  It consumes about 200 Xilinx Virtex slices.  It has been tested at 12.5 MHz.  (The writing works well even at 25 MHz, but the read operation would not operate that fast on my Xilinx XC2S200...)  DPRAMs are used, so that the operation of the module can be verified (by looking at the contents of the same memory on the other port of the dual ported RAM.)<br><br>
<a href="./b10_safe_12_18_01_dual_path.zip">b10_safe_12_18_01_dual_path.zip</a>.
This file contains an example of the memory_sizer_dual_path module in use.  It has separate byte reversal and byte steering logic for both reads and writes.  It consumes about 300 Xilinx Virtex slices and it has been tested at 25 MHz.  (The synthesis tools reported about 10 MHz maximum usable clock frequency, but that was without any timing constraints at all.  I didn't want to take the time to synthesize with constraints, because it makes my tools "dog-slow."  Instead, I just figured that the "critical path" found by the tool was a false one, and decided to test it at 25 MHz.  It worked just fine.)  DPRAMs are used, so that the operation of the module can be verified (by looking at the contents of the same memory on the other port of the dual ported RAM.
<br><br>
<p>NOTE: In order to get these examples to work on your own board, you will need to generate a correct BAUD clock on your board -- see the file "serial.v" for details.  Also, you will need some "level translating" circuit to change the LVTTL level signals coming out of the Xilinx chip into RS232 levels for connection to your computer's serial port.  Be sure to re-assign the IO constraints to match the desired pinouts on your board, and add debug outputs if you like, so that you can view what is happening on a logic analyzer...  Or, you could also simulate these modules!
</p></font>

<!--# include virtual="/ssi/ssi_end.shtml" -->
