<?xml version="1.0" encoding="UTF-8"?>
<!--
//                                                                        //
// Author : John Eaton  Ouabache Designworks                              //
//                                                                        //
//   Copyright (C) 2013 Authors and OPENCORES.ORG			  //
//  									  //
//   This source file may be used and distributed without		  //
//   restriction provided that this copyright statement is not		  //
//   removed from the file and that any derivative work contains	  //
//   the original copyright notice and the associated disclaimer.	  //
//  									  //
//   This source file is free software; you can redistribute it		  //
//   and/or modify it under the terms of the GNU Lesser General		  //
//   Public License as published by the Free Software Foundation;	  //
//   either version 2.1 of the License, or (at your option) any		  //
//   later version.							  //
//  									  //
//   This source is distributed in the hope that it will be		  //
//   useful, but WITHOUT ANY WARRANTY; without even the implied		  //
//   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR		  //
//   PURPOSE. See the GNU Lesser General Public License for more	  //
//   details.								  //
//  									  //
//   You should have received a copy of the GNU Lesser General		  //
//   Public License along with this source; if not, download it		  //
//   from http://www.opencores.org/lgpl.shtml				  //
//  									  //
-->

<spirit:abstractionDefinition 
xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009"
xmlns:socgen="http://opencores.org"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009
http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009/index.xsd">

<spirit:vendor>opencores.org</spirit:vendor>
<spirit:library>wishbone</spirit:library>
<spirit:name>wb</spirit:name>
<spirit:version>b.4_rtl</spirit:version>  

<spirit:busType spirit:vendor="opencores.org" spirit:library="wishbone" spirit:name="wb" spirit:version="b.4"/>
  <spirit:ports>

   <spirit:port>
      <spirit:logicalName>clk</spirit:logicalName>
      <spirit:description>The clock input coordinates all activities for the internal logic within the WISHBONE interconnect. All WISHBONE output signals are registered at the rising edge of clk. All WISHBONE input signals are stable before the rising edge of clk.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isClock>true</spirit:isClock>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:requiresDriver spirit:driverType="clock">true</spirit:requiresDriver>
      </spirit:wire>
    </spirit:port>

    <spirit:port>
      <spirit:logicalName>enable</spirit:logicalName>
      <spirit:description>The enable input determines if a clk cycle should be acted upon or ignored for all operations including reset.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>optional</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>


    <spirit:port>
      <spirit:logicalName>rst</spirit:logicalName>
      <spirit:description>The rst input forces the WISHBONE interface to restart. Furthermore, all internal self-starting state machines will be forced into an initial state. This signal only resets the WISHBONE interface. It is not required to reset other parts of an IP core (although it may be used that way).</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isReset>true</spirit:isReset>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>out</spirit:direction>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:width>1</spirit:width>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
        <spirit:requiresDriver spirit:driverType="singleShot">true</spirit:requiresDriver>
      </spirit:wire>
    </spirit:port>



    <spirit:port>
      <spirit:logicalName>adr</spirit:logicalName>
      <spirit:description>The adr output array is used to pass a binary address. The higher array boundary is specific to the address width of the core, and the lower array boundary is determined by the data port size and granularity. For example the array size on a 32-bit data port with BYTE granularity is adr[n:2]. In some cases (such as FIFO interfaces) the array may not be present on the interface.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>



    <spirit:port>
      <spirit:logicalName>cyc</spirit:logicalName>
      <spirit:description>The cycle output when asserted, indicates that a valid bus cycle is in progress. The signal is asserted for the duration of all bus cycles. For example, during a BLOCK transfer cycle there can be multiple data transfers. The signal is asserted during the first data transfer, and remains asserted until the last data transfer. The signal is useful for interfaces with multi-port interfaces (such as dual port memories). In these cases, the  signal requests use of a common bus from an arbiter.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>





    <spirit:port>
      <spirit:logicalName>wdata</spirit:logicalName>
      <spirit:description>The data output array is used to pass binary data. The array boundaries are determined by the port size, with a maximum port size of 64-bits (e.g. wdata[63:0].Also see the rdata[] and sel[] signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>

    <spirit:port>
      <spirit:logicalName>rdata</spirit:logicalName>
      <spirit:description>The data input array is used to pass binary data. The array boundaries are determined by the port size, with a maximum port size of 64-bits (e.g. rdata[63:0]. Also see the wdata[] and sel[] signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>


   <spirit:port>
      <spirit:logicalName>ack</spirit:logicalName>
      <spirit:description>The acknowledge input  when asserted, indicates the normal termination of a bus cycle. Also see the err and rty signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>


   <spirit:port>
      <spirit:logicalName>err</spirit:logicalName>
      <spirit:description>The error input indicates an abnormal cycle termination. The source of the error, and the response generated by the MASTER is defined by the IP core supplier. Also see the ack and rty signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>


   <spirit:port>
      <spirit:logicalName>rty</spirit:logicalName>
      <spirit:description>The retry input indicates that the interface is not ready to accept or send data, and that the cycle should be retried. When and how the cycle is retried is defined by the IP core supplier. Also see the ack and err signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>



   <spirit:port>
      <spirit:logicalName>stall</spirit:logicalName>
      <spirit:description>The pipeline stall input indicates that current slave is not able to accept the transfer in the transaction queue. This signal is used in pipelined mode.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>





   <spirit:port>
      <spirit:logicalName>lock</spirit:logicalName>
      <spirit:description>The lock output when asserted, indicates that the current bus cycle is uninterruptible. Lock is asserted to request complete ownership of the bus. Once the transfer has started, the INTERCON does not grant the bus to any other MASTER, until the current MASTER negates lock or cyc.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>





   <spirit:port>
      <spirit:logicalName>sel</spirit:logicalName>
      <spirit:description>The select output array indicates where valid data is expected on the rdata signal array during READ cycles, and where it is placed on the wdata signal array during WRITE cycles. The array boundaries are determined by the granularity of a port. For example, if 8-bit granularity is used on a 64-bit port, then there would be an array of eight select signals with boundaries of sel[7:0]. Each individual select signal correlates to one of eight active bytes on the 64-bit data port. For more information about sel, please refer to the data organization section in Chapter 3 of this specification. Also see the rdata[], wdata[] and stb signal descriptions.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>




   <spirit:port>
      <spirit:logicalName>stb</spirit:logicalName>
      <spirit:description>The strobe output indicates a valid data transfer cycle. It is used to qualify various other signals on the interface such as sel[]. The SLAVE asserts either the ack, err  or rty signals in response to every assertion of the stb signal.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>


   <spirit:port>
      <spirit:logicalName>wtgd</spirit:logicalName>
      <spirit:description>Data tag type is used on MASTER and SLAVE interfaces. It contains information that is associated with the data input array wdata[], and is qualified by signal stb. For example, parity protection, error correction and time stamp information can be attached to the data bus. These tag bits simplify the task of defining new signals because their timing (in relation to every bus cycle) is pre-defined by this specification. The name and operation of a data tag must be defined in the WISHBONE DATASHEET.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>




   <spirit:port>
      <spirit:logicalName>rtgd</spirit:logicalName>
      <spirit:description>Data tag type is used on MASTER and SLAVE interfaces. It contains information that is associated with the data output array rdata[], and is qualified by signal stb. For example, parity protection, error correction and time stamp information can be attached to the data bus. These tag bits simplify the task of defining new signals because their timing (in relation to every bus cycle) is pre-defined by this specification. The name and operation of a data tag must be defined in the WISHBONE DATASHEET.</spirit:description>
      <spirit:wire>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>




    <spirit:port>
      <spirit:logicalName>tga</spirit:logicalName>
      <spirit:description>Address tag type contains information associated with address lines adr[], and is qualified by signal stb. For example, address size (24-bit, 32-bit etc.) and memory management (protected vs. unprotected) information can be attached to an address. These tag bits simplify the task of defining new signals because their timing (in relation to every bus cycle) is defined by this specification. The name and operation of an address tag must be defined in the WISHBONE DATASHEET.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>



    <spirit:port>
      <spirit:logicalName>tgc</spirit:logicalName>
      <spirit:description>Cycle tag type  contains information associated with bus cycles, and is qualified by signal cyc. For example, data transfer, interrupt acknowledge and cache control cycles can be uniquely identified with the cycle tag. They can also be used to discriminate between WISHBONE SINGLE, BLOCK and RMW cycles. These tag bits simplify the task of defining new signals because their timing (in relation to every bus cycle) is defined by this specification. The name and operation of a cycle tag must be defined in the WISHBONE DATASHEET.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>



    <spirit:port>
      <spirit:logicalName>we</spirit:logicalName>
      <spirit:description>The write enable output indicates whether the current local bus cycle is a READ or WRITE cycle. The signal is negated during READ cycles, and is asserted during WRITE cycles.</spirit:description>
      <spirit:wire>
        <spirit:qualifier>
          <spirit:isAddress>true</spirit:isAddress>
        </spirit:qualifier>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>CLOCK</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>ENABLE</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onSystem>
          <spirit:vendorExtensions><socgen:envIdentifier>RESET</socgen:envIdentifier></spirit:vendorExtensions>
          <spirit:presence>illegal</spirit:presence>
        </spirit:onSystem>
        <spirit:onMaster>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>out</spirit:direction>
        </spirit:onMaster>
        <spirit:onSlave>
          <spirit:presence>required</spirit:presence>
          <spirit:direction>in</spirit:direction>
        </spirit:onSlave>
      </spirit:wire>
    </spirit:port>




  </spirit:ports>
</spirit:abstractionDefinition>









