<?xml version="1.0" encoding="UTF-8"?>
<!-- Created by Kactus2 - Open source IP-Xact toolset -->
<!-- http://sourceforge.net/projects/kactus2/ -->
<!-- Date: 23.11.2012 -->
<!-- Time: 16:44:12 -->
<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
	<spirit:vendor>TUT</spirit:vendor>
	<spirit:library>soc</spirit:library>
	<spirit:name>basic_tester_hibi_example</spirit:name>
	<spirit:version>1.0</spirit:version>
	<spirit:description>Simple example on how to use basic_tester with hibi.
Hibi is instantiated a) as a segment, b) from 4 wrappers and an OR-network. 

 Tx sends few words to rx which takes and checks them. 
Basic_tester is meant for simulation only.</spirit:description>
	<spirit:model>
		<spirit:views>
			<spirit:view>
				<spirit:name>structural_seg</spirit:name>
				<spirit:description>Instantiates hibi as segement.
Graphical block diagram view. Hence, its type is &quot;hierarchical&quot;.</spirit:description>
				<spirit:envIdentifier>::</spirit:envIdentifier>
				<spirit:hierarchyRef spirit:vendor="TUT" spirit:library="soc" spirit:name="basic_tester_hibi_example.designcfg" spirit:version="1.0"/>
				<spirit:vendorExtensions>
					<kactus2:topLevelViewRef>structural_rtl</kactus2:topLevelViewRef>
				</spirit:vendorExtensions>
			</spirit:view>
			<spirit:view>
				<spirit:name>structural_rtl</spirit:name>
				<spirit:description>Auto-generated top-level from either of the block diagram views.</spirit:description>
				<spirit:envIdentifier>VHDL:Kactus2:</spirit:envIdentifier>
				<spirit:language spirit:strict="false">vhdl</spirit:language>
				<spirit:modelName>basic_tester_hibi_example(structural)</spirit:modelName>
				<spirit:fileSetRef>
					<spirit:localName>structural_vhdlSource</spirit:localName>
				</spirit:fileSetRef>
			</spirit:view>
			<spirit:view>
				<spirit:name>structural_wra</spirit:name>
				<spirit:description>Instantiates hibi from the wrappers.
Graphical block diagram view. Hence, its type is &quot;hierarchical&quot;.</spirit:description>
				<spirit:envIdentifier></spirit:envIdentifier>
				<spirit:hierarchyRef spirit:vendor="TUT" spirit:library="soc" spirit:name="basic_tester_hibi_example.wra.designcfg" spirit:version="1.0"/>
				<spirit:vendorExtensions>
					<kactus2:topLevelViewRef>structural_rtl</kactus2:topLevelViewRef>
				</spirit:vendorExtensions>
			</spirit:view>
		</spirit:views>
	</spirit:model>
	<spirit:fileSets>
		<spirit:fileSet>
			<spirit:name>ModelsimScripts</spirit:name>
			<spirit:group>simulation</spirit:group>
			<spirit:file>
				<spirit:name>../sim/basic_tester_hibi_example_waves.do</spirit:name>
				<spirit:userFileType>Modelsim script</spirit:userFileType>
				<spirit:isIncludeFile spirit:externalDeclarations="false">false</spirit:isIncludeFile>
				<spirit:description>Add necessary signals to wave window and formats them. 

This works with both versions (seg and wra)</spirit:description>
			</spirit:file>
			<spirit:file>
				<spirit:name>../sim/basic_tester_hibi_example.structural.create_makefile.do</spirit:name>
				<spirit:userFileType>ModelsimScript</spirit:userFileType>
				<spirit:isIncludeFile spirit:externalDeclarations="false">false</spirit:isIncludeFile>
				<spirit:description>Script file for Modelsim that compiles all files for view structural_seg.</spirit:description>
			</spirit:file>
			<spirit:defaultFileBuilder>
				<spirit:userFileType>Modelsim script</spirit:userFileType>
				<spirit:command>say &quot;do script_name.do&quot; in Modelsim</spirit:command>
				<spirit:flags>none</spirit:flags>
				<spirit:replaceDefaultFlags>false</spirit:replaceDefaultFlags>
			</spirit:defaultFileBuilder>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>structural_vhdlSource</spirit:name>
			<spirit:description>Auto-generated top-level VHDL</spirit:description>
			<spirit:group>sourceFiles</spirit:group>
			<spirit:file>
				<spirit:name>../vhd/basic_tester_hibi_example.vhd</spirit:name>
				<spirit:fileType>vhdlSource</spirit:fileType>
				<spirit:isIncludeFile spirit:externalDeclarations="false">true</spirit:isIncludeFile>
				<spirit:logicalName spirit:default="false">work</spirit:logicalName>
				<spirit:buildCommand>
					<spirit:command>vcom</spirit:command>
					<spirit:flags>-quiet -check_synthesis -work work</spirit:flags>
					<spirit:replaceDefaultFlags>true</spirit:replaceDefaultFlags>
				</spirit:buildCommand>
				<spirit:description>Auto-generated by Kactus.</spirit:description>
			</spirit:file>
			<spirit:defaultFileBuilder>
				<spirit:fileType>vhdlSource</spirit:fileType>
				<spirit:command>vcom</spirit:command>
				<spirit:flags>-quiet -check_synthesis -work work</spirit:flags>
				<spirit:replaceDefaultFlags>true</spirit:replaceDefaultFlags>
			</spirit:defaultFileBuilder>
		</spirit:fileSet>
	</spirit:fileSets>
	<spirit:vendorExtensions>
		<kactus2:extensions>
			<kactus2:kts_attributes>
				<kactus2:kts_productHier>SoC</kactus2:kts_productHier>
				<kactus2:kts_implementation>HW</kactus2:kts_implementation>
				<kactus2:kts_firmness>Template</kactus2:kts_firmness>
			</kactus2:kts_attributes>
		</kactus2:extensions>
	</spirit:vendorExtensions>
</spirit:component>
