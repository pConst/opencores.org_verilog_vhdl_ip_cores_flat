<?xml version="1.0" encoding="UTF-8"?>
<!--Created by Kactus 2 document generator 09:33:52 ke syys 28 2011-->
<spirit:abstractionDefinition>
	<spirit:vendor>TUT</spirit:vendor>
	<spirit:library>ip.hwp.interface</spirit:library>
	<spirit:name>udp_ip_rx_16bit.absDef</spirit:name>
	<spirit:version>1.0</spirit:version>
	<spirit:busType spirit:vendor="TUT" spirit:library="ip.hwp.interface" spirit:name="udp_ip_rx_16bit" spirit:version="1.0"/>
	<spirit:ports>
		<spirit:port>
			<spirit:logicalName>rx_error_out</spirit:logicalName>
			<spirit:description>System error in ethernet controller.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>dest_port_out</spirit:logicalName>
			<spirit:description>When new_rx = '1', this tells the destination IP port.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>16</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>fatal_error_out</spirit:logicalName>
			<spirit:description>When high, fatal error in ethernet controller. Application must reset.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>link_up_out</spirit:logicalName>
			<spirit:description>When high, link is established between the peers and operations are allowed.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>new_rx_out</spirit:logicalName>
			<spirit:description>This is high when a new rx operation is completed and waiting. This is acknowledged by the first rx_re operation.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>rx_data_out</spirit:logicalName>
			<spirit:description>16 bits of RX data. Read this when rx_data_valid = '1' and acknowledge by issuing re = '1'.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>16</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>rx_data_valid_out</spirit:logicalName>
			<spirit:description>If high, you can instantly read rx_data.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>rx_erroneous_out</spirit:logicalName>
			<spirit:description>High, if the new rx operation was erroneous (e.g. CRC error)</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>rx_len_out</spirit:logicalName>
			<spirit:description>When new_rx = '1', this tells the size of the payload IN BYTES. You have to read ceil(rx_len_out/2) words.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>11</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>rx_re_in</spirit:logicalName>
			<spirit:description>Acknowledge reading a word after rx_data_valid = '1' by asserting this high.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>1</spirit:width>
					<spirit:direction>in</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>source_addr_out</spirit:logicalName>
			<spirit:description>When new_rx = '1', this tells the source IP address.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>32</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
		<spirit:port>
			<spirit:logicalName>source_port_out</spirit:logicalName>
			<spirit:description>When new_rx = '1', this tells the source port.</spirit:description>
			<spirit:wire>
				<spirit:onMaster>
					<spirit:presence>optional</spirit:presence>
					<spirit:width>16</spirit:width>
					<spirit:direction>out</spirit:direction>
				</spirit:onMaster>
				<spirit:requiresDriver spirit:driverType="any"/>false</spirit:wire>
		</spirit:port>
	</spirit:ports>
</spirit:abstractionDefinition>
