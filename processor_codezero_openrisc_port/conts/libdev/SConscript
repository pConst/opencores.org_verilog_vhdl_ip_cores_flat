# -*- mode: python; coding: utf-8; -*-
#
#  Codezero -- Virtualization microkernel for embedded systems.
#
#  Copyright Â© 2009  B Labs Ltd

import os, sys, shelve
from os.path import join

# Get global paths
PROJRELROOT = '../../../'

sys.path.append(PROJRELROOT)

from config.configuration import *
from config.projpaths import *

Import('env', 'platform', 'type')
variant = type

# To include setbit/clrbit functions
LIBL4_RELDIR = 'conts/libl4'
LIBL4_DIR = join(PROJROOT, LIBL4_RELDIR)
LIBL4_INC = join(LIBL4_DIR, 'include')

LIBC_RELDIR = 'conts/libc'
LIBC_DIR = join(PROJROOT, LIBC_RELDIR)
LIBC_INC = join(LIBC_DIR, 'include')

e = env.Clone()
e.Append(CPPPATH = ['#conts/libdev/include', LIBC_INC, LIBL4_INC],
         CCFLAGS = ['-DVARIANT_' + variant.upper()])

objects = []
objects += SConscript('uart/pl011/SConscript', duplicate=0, \
                      exports = {'platform' : platform, 'env' : e})
objects += SConscript('timer/sp804/SConscript', duplicate=0, \
                      exports = {'platform' : platform, 'env' : e})
objects += SConscript('kmi/pl050/SConscript', duplicate=0, \
                      exports = {'platform' : platform, 'env' : e})
objects += SConscript('clcd/pl110/SConscript', duplicate=0, \
		      exports = {'platform' : platform, 'env' : e})

objects += SConscript('uart/omap/SConscript', duplicate=0, \
                       exports = {'platform' : platform, 'env' : e})
objects += SConscript('timer/omap/SConscript', duplicate=0, \
                      exports = {'platform' : platform, 'env' : e})

library = e.StaticLibrary('libdev-' + variant, objects)
Return('library')
