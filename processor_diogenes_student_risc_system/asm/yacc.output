Terminals which are not used

   NUM


Grammar

    0 $accept: asms $end

    1 asms: asm
    2     | asms asm

    3 asm: LABEL
    4    | nop
    5    | ari
    6    | ldsi
    7    | cmp
    8    | br
    9    | sha
   10    | jmpcall
   11    | mov
   12    | mem
   13    | sel
   14    | seli
   15    | ldl

   16 nop: NOP

   17 ari: ARI REG C REG C REG

   18 ldsi: LDI REG C imm8b
   19     | LSI REG C imm8b

   20 cmp: CMP REG C REG C REG

   21 br: BR REG C USELAB
   22   | BR REG C imm8bs

   23 sha: SHA REG C imm6b
   24    | SHA REG C REG C imm6b

   25 jmpcall: JUMP OSBRA REG CSBRA
   26        | CALL REG C OSBRA REG CSBRA

   27 mov: MOV REG C REG

   28 mem: MEM REG C OBRA REG CBRA

   29 sel: SEL REG C OBRA REG CBRA
   30    | SEL REG C REG C OBRA REG CBRA

   31 seli: SELI REG C imm2b
   32     | SELI REG C REG C imm2b

   33 ldl: LDL REG C imm32
   34    | LDL REG C USELAB

   35 imm2b: IMM

   36 imm8b: IMM

   37 imm8bs: IMM

   38 imm6b: IMM

   39 imm32: IMM


Terminals, with rules where they appear

$end (0) 0
error (256)
C (258) 17 18 19 20 21 22 23 24 26 27 28 29 30 31 32 33 34
OBRA (259) 28 29 30
CBRA (260) 28 29 30
OSBRA (261) 25 26
CSBRA (262) 25 26
NUM (263)
IMM (264) 35 36 37 38 39
LABEL (265) 3
USELAB (266) 21 34
REG (267) 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
ARI (268) 17
LDI (269) 18
LSI (270) 19
CMP (271) 20
BR (272) 21 22
SHA (273) 23 24
JUMP (274) 25
CALL (275) 26
MOV (276) 27
MEM (277) 28
SEL (278) 29 30
SELI (279) 31 32
LDL (280) 33 34
NOP (281) 16


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
asms (28)
    on left: 1 2, on right: 0 2
asm (29)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15, on right: 1 2
nop (30)
    on left: 16, on right: 4
ari (31)
    on left: 17, on right: 5
ldsi (32)
    on left: 18 19, on right: 6
cmp (33)
    on left: 20, on right: 7
br (34)
    on left: 21 22, on right: 8
sha (35)
    on left: 23 24, on right: 9
jmpcall (36)
    on left: 25 26, on right: 10
mov (37)
    on left: 27, on right: 11
mem (38)
    on left: 28, on right: 12
sel (39)
    on left: 29 30, on right: 13
seli (40)
    on left: 31 32, on right: 14
ldl (41)
    on left: 33 34, on right: 15
imm2b (42)
    on left: 35, on right: 31 32
imm8b (43)
    on left: 36, on right: 18 19
imm8bs (44)
    on left: 37, on right: 22
imm6b (45)
    on left: 38, on right: 23 24
imm32 (46)
    on left: 39, on right: 33


state 0

    0 $accept: . asms $end

    LABEL  shift, and go to state 1
    ARI    shift, and go to state 2
    LDI    shift, and go to state 3
    LSI    shift, and go to state 4
    CMP    shift, and go to state 5
    BR     shift, and go to state 6
    SHA    shift, and go to state 7
    JUMP   shift, and go to state 8
    CALL   shift, and go to state 9
    MOV    shift, and go to state 10
    MEM    shift, and go to state 11
    SEL    shift, and go to state 12
    SELI   shift, and go to state 13
    LDL    shift, and go to state 14
    NOP    shift, and go to state 15

    asms     go to state 16
    asm      go to state 17
    nop      go to state 18
    ari      go to state 19
    ldsi     go to state 20
    cmp      go to state 21
    br       go to state 22
    sha      go to state 23
    jmpcall  go to state 24
    mov      go to state 25
    mem      go to state 26
    sel      go to state 27
    seli     go to state 28
    ldl      go to state 29


state 1

    3 asm: LABEL .

    $default  reduce using rule 3 (asm)


state 2

   17 ari: ARI . REG C REG C REG

    REG  shift, and go to state 30


state 3

   18 ldsi: LDI . REG C imm8b

    REG  shift, and go to state 31


state 4

   19 ldsi: LSI . REG C imm8b

    REG  shift, and go to state 32


state 5

   20 cmp: CMP . REG C REG C REG

    REG  shift, and go to state 33


state 6

   21 br: BR . REG C USELAB
   22   | BR . REG C imm8bs

    REG  shift, and go to state 34


state 7

   23 sha: SHA . REG C imm6b
   24    | SHA . REG C REG C imm6b

    REG  shift, and go to state 35


state 8

   25 jmpcall: JUMP . OSBRA REG CSBRA

    OSBRA  shift, and go to state 36


state 9

   26 jmpcall: CALL . REG C OSBRA REG CSBRA

    REG  shift, and go to state 37


state 10

   27 mov: MOV . REG C REG

    REG  shift, and go to state 38


state 11

   28 mem: MEM . REG C OBRA REG CBRA

    REG  shift, and go to state 39


state 12

   29 sel: SEL . REG C OBRA REG CBRA
   30    | SEL . REG C REG C OBRA REG CBRA

    REG  shift, and go to state 40


state 13

   31 seli: SELI . REG C imm2b
   32     | SELI . REG C REG C imm2b

    REG  shift, and go to state 41


state 14

   33 ldl: LDL . REG C imm32
   34    | LDL . REG C USELAB

    REG  shift, and go to state 42


state 15

   16 nop: NOP .

    $default  reduce using rule 16 (nop)


state 16

    0 $accept: asms . $end
    2 asms: asms . asm

    $end   shift, and go to state 43
    LABEL  shift, and go to state 1
    ARI    shift, and go to state 2
    LDI    shift, and go to state 3
    LSI    shift, and go to state 4
    CMP    shift, and go to state 5
    BR     shift, and go to state 6
    SHA    shift, and go to state 7
    JUMP   shift, and go to state 8
    CALL   shift, and go to state 9
    MOV    shift, and go to state 10
    MEM    shift, and go to state 11
    SEL    shift, and go to state 12
    SELI   shift, and go to state 13
    LDL    shift, and go to state 14
    NOP    shift, and go to state 15

    asm      go to state 44
    nop      go to state 18
    ari      go to state 19
    ldsi     go to state 20
    cmp      go to state 21
    br       go to state 22
    sha      go to state 23
    jmpcall  go to state 24
    mov      go to state 25
    mem      go to state 26
    sel      go to state 27
    seli     go to state 28
    ldl      go to state 29


state 17

    1 asms: asm .

    $default  reduce using rule 1 (asms)


state 18

    4 asm: nop .

    $default  reduce using rule 4 (asm)


state 19

    5 asm: ari .

    $default  reduce using rule 5 (asm)


state 20

    6 asm: ldsi .

    $default  reduce using rule 6 (asm)


state 21

    7 asm: cmp .

    $default  reduce using rule 7 (asm)


state 22

    8 asm: br .

    $default  reduce using rule 8 (asm)


state 23

    9 asm: sha .

    $default  reduce using rule 9 (asm)


state 24

   10 asm: jmpcall .

    $default  reduce using rule 10 (asm)


state 25

   11 asm: mov .

    $default  reduce using rule 11 (asm)


state 26

   12 asm: mem .

    $default  reduce using rule 12 (asm)


state 27

   13 asm: sel .

    $default  reduce using rule 13 (asm)


state 28

   14 asm: seli .

    $default  reduce using rule 14 (asm)


state 29

   15 asm: ldl .

    $default  reduce using rule 15 (asm)


state 30

   17 ari: ARI REG . C REG C REG

    C  shift, and go to state 45


state 31

   18 ldsi: LDI REG . C imm8b

    C  shift, and go to state 46


state 32

   19 ldsi: LSI REG . C imm8b

    C  shift, and go to state 47


state 33

   20 cmp: CMP REG . C REG C REG

    C  shift, and go to state 48


state 34

   21 br: BR REG . C USELAB
   22   | BR REG . C imm8bs

    C  shift, and go to state 49


state 35

   23 sha: SHA REG . C imm6b
   24    | SHA REG . C REG C imm6b

    C  shift, and go to state 50


state 36

   25 jmpcall: JUMP OSBRA . REG CSBRA

    REG  shift, and go to state 51


state 37

   26 jmpcall: CALL REG . C OSBRA REG CSBRA

    C  shift, and go to state 52


state 38

   27 mov: MOV REG . C REG

    C  shift, and go to state 53


state 39

   28 mem: MEM REG . C OBRA REG CBRA

    C  shift, and go to state 54


state 40

   29 sel: SEL REG . C OBRA REG CBRA
   30    | SEL REG . C REG C OBRA REG CBRA

    C  shift, and go to state 55


state 41

   31 seli: SELI REG . C imm2b
   32     | SELI REG . C REG C imm2b

    C  shift, and go to state 56


state 42

   33 ldl: LDL REG . C imm32
   34    | LDL REG . C USELAB

    C  shift, and go to state 57


state 43

    0 $accept: asms $end .

    $default  accept


state 44

    2 asms: asms asm .

    $default  reduce using rule 2 (asms)


state 45

   17 ari: ARI REG C . REG C REG

    REG  shift, and go to state 58


state 46

   18 ldsi: LDI REG C . imm8b

    IMM  shift, and go to state 59

    imm8b  go to state 60


state 47

   19 ldsi: LSI REG C . imm8b

    IMM  shift, and go to state 59

    imm8b  go to state 61


state 48

   20 cmp: CMP REG C . REG C REG

    REG  shift, and go to state 62


state 49

   21 br: BR REG C . USELAB
   22   | BR REG C . imm8bs

    IMM     shift, and go to state 63
    USELAB  shift, and go to state 64

    imm8bs  go to state 65


state 50

   23 sha: SHA REG C . imm6b
   24    | SHA REG C . REG C imm6b

    IMM  shift, and go to state 66
    REG  shift, and go to state 67

    imm6b  go to state 68


state 51

   25 jmpcall: JUMP OSBRA REG . CSBRA

    CSBRA  shift, and go to state 69


state 52

   26 jmpcall: CALL REG C . OSBRA REG CSBRA

    OSBRA  shift, and go to state 70


state 53

   27 mov: MOV REG C . REG

    REG  shift, and go to state 71


state 54

   28 mem: MEM REG C . OBRA REG CBRA

    OBRA  shift, and go to state 72


state 55

   29 sel: SEL REG C . OBRA REG CBRA
   30    | SEL REG C . REG C OBRA REG CBRA

    OBRA  shift, and go to state 73
    REG   shift, and go to state 74


state 56

   31 seli: SELI REG C . imm2b
   32     | SELI REG C . REG C imm2b

    IMM  shift, and go to state 75
    REG  shift, and go to state 76

    imm2b  go to state 77


state 57

   33 ldl: LDL REG C . imm32
   34    | LDL REG C . USELAB

    IMM     shift, and go to state 78
    USELAB  shift, and go to state 79

    imm32  go to state 80


state 58

   17 ari: ARI REG C REG . C REG

    C  shift, and go to state 81


state 59

   36 imm8b: IMM .

    $default  reduce using rule 36 (imm8b)


state 60

   18 ldsi: LDI REG C imm8b .

    $default  reduce using rule 18 (ldsi)


state 61

   19 ldsi: LSI REG C imm8b .

    $default  reduce using rule 19 (ldsi)


state 62

   20 cmp: CMP REG C REG . C REG

    C  shift, and go to state 82


state 63

   37 imm8bs: IMM .

    $default  reduce using rule 37 (imm8bs)


state 64

   21 br: BR REG C USELAB .

    $default  reduce using rule 21 (br)


state 65

   22 br: BR REG C imm8bs .

    $default  reduce using rule 22 (br)


state 66

   38 imm6b: IMM .

    $default  reduce using rule 38 (imm6b)


state 67

   24 sha: SHA REG C REG . C imm6b

    C  shift, and go to state 83


state 68

   23 sha: SHA REG C imm6b .

    $default  reduce using rule 23 (sha)


state 69

   25 jmpcall: JUMP OSBRA REG CSBRA .

    $default  reduce using rule 25 (jmpcall)


state 70

   26 jmpcall: CALL REG C OSBRA . REG CSBRA

    REG  shift, and go to state 84


state 71

   27 mov: MOV REG C REG .

    $default  reduce using rule 27 (mov)


state 72

   28 mem: MEM REG C OBRA . REG CBRA

    REG  shift, and go to state 85


state 73

   29 sel: SEL REG C OBRA . REG CBRA

    REG  shift, and go to state 86


state 74

   30 sel: SEL REG C REG . C OBRA REG CBRA

    C  shift, and go to state 87


state 75

   35 imm2b: IMM .

    $default  reduce using rule 35 (imm2b)


state 76

   32 seli: SELI REG C REG . C imm2b

    C  shift, and go to state 88


state 77

   31 seli: SELI REG C imm2b .

    $default  reduce using rule 31 (seli)


state 78

   39 imm32: IMM .

    $default  reduce using rule 39 (imm32)


state 79

   34 ldl: LDL REG C USELAB .

    $default  reduce using rule 34 (ldl)


state 80

   33 ldl: LDL REG C imm32 .

    $default  reduce using rule 33 (ldl)


state 81

   17 ari: ARI REG C REG C . REG

    REG  shift, and go to state 89


state 82

   20 cmp: CMP REG C REG C . REG

    REG  shift, and go to state 90


state 83

   24 sha: SHA REG C REG C . imm6b

    IMM  shift, and go to state 66

    imm6b  go to state 91


state 84

   26 jmpcall: CALL REG C OSBRA REG . CSBRA

    CSBRA  shift, and go to state 92


state 85

   28 mem: MEM REG C OBRA REG . CBRA

    CBRA  shift, and go to state 93


state 86

   29 sel: SEL REG C OBRA REG . CBRA

    CBRA  shift, and go to state 94


state 87

   30 sel: SEL REG C REG C . OBRA REG CBRA

    OBRA  shift, and go to state 95


state 88

   32 seli: SELI REG C REG C . imm2b

    IMM  shift, and go to state 75

    imm2b  go to state 96


state 89

   17 ari: ARI REG C REG C REG .

    $default  reduce using rule 17 (ari)


state 90

   20 cmp: CMP REG C REG C REG .

    $default  reduce using rule 20 (cmp)


state 91

   24 sha: SHA REG C REG C imm6b .

    $default  reduce using rule 24 (sha)


state 92

   26 jmpcall: CALL REG C OSBRA REG CSBRA .

    $default  reduce using rule 26 (jmpcall)


state 93

   28 mem: MEM REG C OBRA REG CBRA .

    $default  reduce using rule 28 (mem)


state 94

   29 sel: SEL REG C OBRA REG CBRA .

    $default  reduce using rule 29 (sel)


state 95

   30 sel: SEL REG C REG C OBRA . REG CBRA

    REG  shift, and go to state 97


state 96

   32 seli: SELI REG C REG C imm2b .

    $default  reduce using rule 32 (seli)


state 97

   30 sel: SEL REG C REG C OBRA REG . CBRA

    CBRA  shift, and go to state 98


state 98

   30 sel: SEL REG C REG C OBRA REG CBRA .

    $default  reduce using rule 30 (sel)
