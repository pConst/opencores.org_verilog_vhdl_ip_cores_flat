      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--===========================================================================--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--  CF SECTOR READER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--  - SEPTEMBER 2002
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--  - UPV / EHU.  
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Design units 	: FAT FILE LOADER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- File name    	: cf_sector_reader.txt
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Purpose      	: READ RAW SECTORS FROM CF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--                  
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Library      	: -
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Languaje	: ASSEMBLER FOR XILINX PICOBLAZE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Compiler 	: KCPSM ASSEMBLER V1.25
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Debugger	: PSM DEBUG V1.00
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--===========================================================================--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-------------------------------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Revision list
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Version   Author                 Date           Changes
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 260902    Armando Astarloa   27 September 2002  -
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 241002    Armando Astarloa   27 October   2002  Reset on error
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 031202    Armando Astarloa   27 December  2002  Load LBA information from data bus
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 120103	  Armando Astarloa   12 January   2003  Quit status check when words reading
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 290103	  Armando Astarloa   29 January   2003  Reset function. Reset after error
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 050503	  Armando Astarloa   02 May	    2003  Allow not all bytes of the sector read.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--								    do_reset_and_retry state
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 160503	  Armando Astarloa   15	May	    2003  Complete sector reading
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 170603	  Armando Astarloa   17 June	    2003  Bug in words per sector read
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- 230603	  Armando Astarloa   24 June	    2003  Quit soft reset (KCPSM v.1002 has reset)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--								    
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-------------------------------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- Description    :  DUMMY CF SECTORS READ
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-------------------------------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- CONSTANT DEFINITIONS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DELAY1
   OPERAND2-03
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50 MHZ DELAY1 => T(clk_i) => fastloop=DELAY1*T*2= 120ns sF=1 => delay= sF*fastloop
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50 MHZ DELAY1=03 => T=20NS => fastloop=3*20*2= 120ns sF=1 => delay= 120ns
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-IDENTIFY_COMMAND
   OPERAND2-EC
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-WRITE_SECTOR_COMMAND
   OPERAND2-30
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-READ_SECTOR_COMMAND
   OPERAND2-20
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-WRITE_SEC_FEATURE
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SOFT_RESET
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- RAM REGISTERS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s0 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s3 -> WISHBONE CONTROL
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s4 -> REGISTERS STACK
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s5 -> MY_STATUS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;		D3 = ERROR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;		D2 = DATA TRANSFER ALLOWED (0 NOT / 1 YES)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;		D1 = COMMAND ALLOWED (NOT BUSY) (0 NOT / 1 YES)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;		D0 = SECTOR AVAILABLE (0 NOT / 1 YES)
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SECTOR_AVAILABLE
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-COMMAND_ALLOWED
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_TRANSFER_ALLOWED
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ERROR_MY_STATUS
   OPERAND2-08
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s6 -> WORDS_READ
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s7 -> LBA_7_0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s8 -> LBA_15_8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; s9 -> LBA_23_16
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sA -> LD_LBA_27_24
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sB -> data[7:0] in ide
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sC -> data[15:8] in ide
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sD -> data[7:0] out ide
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sE -> data[15:8] out ide
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sF -> acummulator
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- OUTPUT PORTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- IDE INTERFACE PORTS - OUTPUTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IDE_OUT_7_0
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IDE_OUT_15_8
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-IDE_CONTROL_OUT
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D7 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D6 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D5 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D4 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D3 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D2 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D1 = NIOWR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D0 = NIORD
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-NIOWR
   OPERAND2-FD
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-NIORD
   OPERAND2-FE
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-IDE_ADDRESS_OUT
   OPERAND2-03
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D7 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D6 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D5 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D4 = NCE1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D3 = NCE0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D2 = A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D1 = A1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D0 = A0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WRITE IDE REGISTERS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    NCE1/NCE0/ A2/ A1/ A0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-CONTROL
   OPERAND2-0E
    COMMENT-; 000   0    1   1   1   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA
   OPERAND2-10
    COMMENT-; 000   1    0   0   0   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-FEATURE
   OPERAND2-11
    COMMENT-; 000   1    0   0   0   1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SECTOR_COUNT
   OPERAND2-12
    COMMENT-; 000   1    0   0   1   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LBA_7_0
   OPERAND2-13
    COMMENT-; 000   1    0   0   1   1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LBA_15_8
   OPERAND2-14
    COMMENT-; 000   1    0   1   0   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LBA_23_16
   OPERAND2-15
    COMMENT-; 000   1    0   1   0   1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LD_LBA_27_24
   OPERAND2-16
    COMMENT-; 000   1    0   1   1   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-COMMAND
   OPERAND2-17
    COMMENT-; 000   1    0   1   1   1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-CF_OFF
   OPERAND2-18
    COMMENT-; 000	1    1	 0   0   0 		
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; READ IDE REGISTERS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    NCE1/NCE0/ A2/ A1/ A0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-A_STATUS
   OPERAND2-0E
    COMMENT-; 000   0    1   1   1   0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-STATUS
   OPERAND2-17
    COMMENT-; 000   1    0   1   1   1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- WISHBONE INTERFACE PORTS - OUTPUTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_WB_OUT_7_0
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_WB_OUT_15_8
   OPERAND2-05
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-CONTROL_WB_OUT
   OPERAND2-06
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D7 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D6 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D5 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D4 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D3 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D2 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D1 = TAG0_WORD_AVAILABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D0 = ACK_CF_READER
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ACK_CF_READER
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-TAG0_WORD_AVAILABLE
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- BUS CONTROL SIGNALS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-CONTROL_OUT
   OPERAND2-07
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D7 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D6 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D5 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D4 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D3 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D2 = ERROR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D1 = WB_BUS_WRITE_ENABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D0 = IDE_BUS_WRITE_ENABLE
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-IDE_BUS_WRITE_ENABLE
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-WB_BUS_WRITE_ENABLE
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ERROR
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- INPUT PORTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- IDE INTERFACE PORTS - INPUTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IDE_IN_7_0
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IDE_IN_15_8
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- WISHBONE INTERFACE PORTS - INPUTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-CONTROL_WB_IN
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D7 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D6 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D5 = 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D4 = WB_A0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D3 = -
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D2 = W_WE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D1 = TAG1_WORD_REQUEST
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; D0 = STROBE_CF_READER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; STROBE_CF_READER = 1 & W_WE=1 & WB_A0 = 0 
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-WRITE_LBA_15_0
   OPERAND2-05
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; STROBE_CF_READER = 1 & W_WE=1 & WB_A0 = 1 
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-WRITE_LBA_27_16
   OPERAND2-15
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-STROBE_CF_READER_AND_RD
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-TAG1_WORD_REQUEST
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-W_WE
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- WISHBONE INTERFACE PORTS - INPUTS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_WB_IN_7_0
   OPERAND2-03
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_WB_IN_15_8
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;-- REGISTERS INITIALIZATION
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--
      LABEL-inicialization
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; BUS CONTROL : WRITE NOT ENABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WISHBONE BUS INIZIALIZATION
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-DATA_WB_OUT_7_0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-DATA_WB_OUT_15_8
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_WB_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE BUS INICIALIZATION
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-DATA_IDE_OUT_7_0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-DATA_IDE_OUT_15_8
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-18
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_ADDRESS_OUT
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 210NS*31 (RESET DELAY)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-soft_reset
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-main
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CHECK WISHBONE BUS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait state for stb_i deassertion
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sF,01
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CALL wait_loop
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s3
   OPERAND2-CONTROL_WB_IN
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CHECK STROBE & READ
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s3
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-WRITE_LBA_15_0
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-store_lba_15_0
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s3
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-WRITE_LBA_27_16
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-store_lba_27_16
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s3
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-STROBE_CF_READER_AND_RD
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-put_data_in_wb_bus
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IF NOT READ REQUEST MAINTAIN SIGNAL
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_WB_OUT
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-main
   OPERAND2-
    COMMENT-
      LABEL-store_lba_15_0
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA_WB_IN_7_0 -> s7 LBA_7_0
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s7
   OPERAND2-DATA_WB_IN_7_0
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA_WB_IN_15_8 -> s8 LBA_15_8
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s8
   OPERAND2-DATA_WB_IN_15_8
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SECTOR AVAILABLE / COMMAND AVAILABLE -> 0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wishbone_ack
   OPERAND2-
    COMMENT-
      LABEL-store_lba_27_16
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA_WB_IN_7_0 -> s9 LBA_23_16
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s9
   OPERAND2-DATA_WB_IN_7_0
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA_WB_IN_15_8 -> s10 LD_LBA_27_24
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-sA
   OPERAND2-DATA_WB_IN_15_8
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SECTOR AVAILABLE -> 0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; antes 020503 LOAD sF,FE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wishbone_ack
   OPERAND2-
    COMMENT-
      LABEL-do_reset_and_retry
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-soft_reset
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-00
    COMMENT-
      LABEL-put_data_in_wb_bus
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_word_from_cf
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; check for error
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-ERROR_MY_STATUS
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-do_reset_and_retry
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sB
   OPERAND2-DATA_WB_OUT_7_0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sC
   OPERAND2-DATA_WB_OUT_15_8
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ENABLE WB ENABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-WB_BUS_WRITE_ENABLE
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-wishbone_ack
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WISHBONE ACK
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-ACK_CF_READER
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_WB_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; null - wait state
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WISHBONE MASTER MUST CHECK ACK SIGNAL
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IN THE RISING EDGE OF THE CLOCK AND DEASSERT 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; STROBE SIGNAL. SLAVE AUTOMATICALLY DEASSERT ACK
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_WB_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;OUTPUT sF,CONTROL_OUT	
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-main
   OPERAND2-
    COMMENT-
      LABEL-wait_loop
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SOFTWARE DELAY LOOP
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; TAKES SLOW LOOP VALUE FROM sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; TWO CYCLES PER INSTRUCTION
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SLOW LOOP 3 INSTRUCTIONS * sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; FAST LOOP 2 INSTRUCTIONS * DELAY1 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50 MHZ DELAY1=0A => T=20NS => fl=3*20*2= 120ns sF=1 => delay= 120ns
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-sF
    COMMENT-
      LABEL-slow_loop
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-DELAY1
    COMMENT-
      LABEL-fast_loop
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-fast_loop
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-slow_loop
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-write_ide_register
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; TAKE ADDRESS FROM SF REGISTER AND IT'S PUT INTO THE PORT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_ADDRESS_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA OUT IDE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sD
   OPERAND2-DATA_IDE_OUT_7_0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sE
   OPERAND2-DATA_IDE_OUT_15_8
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA OUT BUS ENABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-IDE_BUS_WRITE_ENABLE
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 70 NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (120ns/50Mhz)
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WRITE STROBE ON
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-NIOWR
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 165NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (240ns/50Mhz)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 020503
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WRITE STROBE OFF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 20NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (410ns/50Mhz)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 020503
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sF,01
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CALL wait_loop
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CE AND ADRESSES OFF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-CF_OFF
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_ADDRESS_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 30NS (MIN) (if delay of the two previos inst>30ns this is not necessary)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (put again 020503)
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA OUT BUS DISABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (put again 020503)
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-read_ide_register
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; TAKE ADDRESS FROM SF REGISTER AND IT'S PUT INTO THE PORT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_ADDRESS_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 70 NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; READ STROBE ON
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; reset control_out (140503)
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-NIORD
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 165NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; TAKE DE DATA FROM IDE BUS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-sB
   OPERAND2-DATA_IDE_IN_7_0
    COMMENT-
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-sC
   OPERAND2-DATA_IDE_IN_15_8
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; READ STROBE OFF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 20NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sF,01
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CALL wait_loop
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CE AND ADRESSES OFF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-CF_OFF
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-IDE_ADDRESS_OUT
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WAIT FOR 20NS (MIN)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; (120ns/50mhz)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sF,01
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CALL wait_loop
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-read_sector
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; WRITE ATA COMMANDS TO THE CF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE FEATURE REGISTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-WRITE_SEC_FEATURE
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FEATURE
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE SECTOR COUNT REGISTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-SECTOR_COUNT
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE LBA_7_0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-s7
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-LBA_7_0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE LBA_15_8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-s8
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-LBA_15_8
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE LBA_23_16
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-s9
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-LBA_23_16
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE LD_LBA_27_24
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;	
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; LBA_27_42 OR WITH 1110
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;			BIT7 : 1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;			BIT6 : LBA=1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;			BIT5 : 1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;			BIT4 : DRV=0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-sA
    COMMENT-
      LABEL-
INSTRUCTION-OR
   OPERAND1-sF
   OPERAND2-E0
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-LD_LBA_27_24
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IDE READ SECTOR COMMAND
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-READ_SECTOR_COMMAND
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-COMMAND
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; PUT SECTOR ALLOWED FLAG INTO MY_STATUS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 290103 Added data available check
      LABEL-retry_status_check
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-cf_status_check
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-ERROR_MY_STATUS
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NZ
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-DATA_TRANSFER_ALLOWED
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; LOOPS UNTIL SECTOR DATA IS AVAILABLE
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-retry_status_check
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-SECTOR_AVAILABLE
    COMMENT-
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; RESET WORDS READ REGISTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-read_word_from_cf
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CHECK IF THE SECTOR IS AVAILABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-SECTOR_AVAILABLE
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IF SECTOR_AVAILABLE=0 JUMP TO READ_NEW_SECTOR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CALL
   OPERAND1-Z
   OPERAND2-read_new_sector
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; check for error
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-ERROR_MY_STATUS
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NZ
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;retry_status_check:
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CALL cf_status_check
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CHECK IF DATA IS AVAILABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 120103 - changed . When there is sector
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; available in the cf ram buffer it is not
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; necessary to check neither bsy or drq
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; only read words with the correct timing paramenters
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sF,DATA_TRANSFER_ALLOWED
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;AND sF,s5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; LOOPS UNTIL SECTOR DATA IS AVAILABLE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;JUMP Z,retry_status_check
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; end 120103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IF 256 WORD READ -> SECTOR AVAILABLE=0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_word
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-s6
   OPERAND2-s6
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-reset_word_READ
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DECREMENT NUMBER OF WORDS READ
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-reset_word_READ
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; IF 256 WORD READ -> SECTOR AVAILABLE=0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;ADD s7,01
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FE
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-read_word
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; READ WORDS FROM IDE DATA REGISTERS
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-DATA
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA ARE IN sB , sC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA AVAILABLE SIGNAL IS STORED
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-TAG0_WORD_AVAILABLE
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_WB_OUT
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-dummy_word_read
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_word
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-
      LABEL-read_new_sector
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-cf_status_check
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-DATA_TRANSFER_ALLOWED
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;loops until previous non READ words are READ
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-dummy_word_read
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-ERROR_MY_STATUS
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NZ
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-s5
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-COMMAND_ALLOWED
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; loops until commands are allowed
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-read_new_sector
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-read_sector
   OPERAND2-
    COMMENT-
      LABEL-cf_status_check
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CF STATUS REGISTER READ
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-STATUS
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ERROR 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 	  BSY/DRDY/DWF/DSC/DRQ/CORR/0/ERR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; MASK    0    0   0   0   0    0 0   1	
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ERR-ST  X    X   X   X   X    X X   1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; AND     0    0   0   0   0    0 0   1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sB
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-put_error_code
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DATA REQUEST MASK (READY=1 : BUSY=0 : DRQ=1) 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 	  BSY/DRDY/DWF/DSC/DRQ/CORR/0/ERR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; MASK    1    1   0   0   1    0 0   1	
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DRQ-ST  0    1   X   X   1    X X   0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; AND     0    1   0   0   1    0 0   0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-C9
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sB
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-48
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-put_data_request_allowed
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; COMMAND ALLOWED MASK (READY=1 : BUSY=0) 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 	  BSY/DRDY/DWF/DSC/DRQ/CORR/0/ERR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; MASK    1    1   0   0   0    0 0   1	
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; CMD-ST  0    1   X   X   0    X X   0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; AND     0    1   0   0   0    0 0   0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-C1
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-sF
   OPERAND2-sB
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-40
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-put_command_allowed
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ELSE DATA_TRANSFER_ALLOWED & COMMAND_ALLOWED => 0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;JUMP put_error_code
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; REVISAR ???
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;AND s5,01
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-put_error_code
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ERROR SIGNAL
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; PUT ERROR CODE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-sF
   OPERAND2-CONTROL_OUT
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-soft_reset
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-ERROR_MY_STATUS
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;JUMP inicialization (STACK OVERFLOW???)
      LABEL-soft_reset
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-SOFT_RESET
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-CONTROL
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-CONTROL
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-write_ide_register
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-put_data_request_allowed
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DRQ ALLOW -> MY STATUS REGISTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-FD
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-DATA_TRANSFER_ALLOWED
    COMMENT-
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-put_command_allowed
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DRQ ALLOW -> MY STATUS REGISTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-FB
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-COMMAND_ALLOWED
    COMMENT-
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-sF
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-FF
   OPERAND2-
    COMMENT-
      LABEL-interrupt
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
