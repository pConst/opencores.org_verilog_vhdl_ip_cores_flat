
;; Function foo (foo)


;; Generating RTL for tree basic block 0

;; Generating RTL for tree basic block 1

;; Generating RTL for tree basic block 2


;;
;; Full RTL generated for this function:
;;
(note 2 0 9 NOTE_INSN_DELETED)

;; Start of basic block 0, registers live: (nil)
(note 9 2 6 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 6 9 7 0 (set (reg:SI 25)
        (reg/f:SI 17 virtual-incoming-args)) -1 (nil)
    (nil))

(note 7 6 8 0 NOTE_INSN_FUNCTION_BEG)

(note 8 7 10 0 NOTE_INSN_DELETED)
;; End of basic block 0, registers live:
 (nil)

;; Start of basic block 1, registers live: (nil)
(code_label 10 8 11 1 2 "" [0 uses])

(note 11 10 12 1 [bb 1] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 1, registers live:
 (nil)

;; Start of basic block 2, registers live: (nil)
(code_label 12 11 13 2 3 "" [1 uses])

(note 13 12 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 2 (set (reg/v:SI 23 [ a ])
        (asm_operands:SI ("") ("=r") 0 []
             [] ("gcc/testsuite/gcc.c-torture/compile/20000827-1.c") 13)) -1 (nil)
    (nil))

(insn 16 15 18 2 (set (reg/v:QI 22 [ b ])
        (asm_operands:QI ("") ("=r") 0 []
             [] ("gcc/testsuite/gcc.c-torture/compile/20000827-1.c") 13)) -1 (nil)
    (nil))

(insn 18 16 19 2 (set (reg:SI 26)
        (ashift:SI (subreg:SI (reg/v:QI 22 [ b ]) 0)
            (const_int 24 [0x18]))) -1 (nil)
    (nil))

(insn 19 18 20 2 (set (reg:SI 26)
        (ashiftrt:SI (reg:SI 26)
            (const_int 24 [0x18]))) -1 (nil)
    (nil))

(insn 20 19 21 2 (set (reg:CC 16 cc)
        (compare:CC (reg:SI 26)
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CC 16 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) -1 (nil)
    (expr_list:REG_BR_PROB (const_int 8900 [0x22c4])
        (nil)))
;; End of basic block 2, registers live:
 (nil)

;; Start of basic block 3, registers live: (nil)
(code_label 22 21 23 3 4 "" [0 uses])

(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 3 (set (reg:SI 24 [ <result> ])
        (reg/v:SI 23 [ a ])) -1 (nil)
    (nil))

(jump_insn 25 24 26 3 (set (pc)
        (label_ref 29)) -1 (nil)
    (nil))
;; End of basic block 3, registers live:
 (nil)

(barrier 26 25 27)

(note 27 26 37 NOTE_INSN_FUNCTION_END)

;; Start of basic block 4, registers live: (nil)
(note 37 27 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 31 37 32 4 (clobber (reg/i:SI 0 r0)) -1 (nil)
    (nil))

(insn 32 31 33 4 (clobber (reg:SI 24 [ <result> ])) -1 (nil)
    (nil))

(jump_insn 33 32 34 4 (set (pc)
        (label_ref 35)) -1 (nil)
    (nil))
;; End of basic block 4, registers live:
 (nil)

(barrier 34 33 29)

;; Start of basic block 5, registers live: (nil)
(code_label 29 34 38 5 1 "" [1 uses])

(note 38 29 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 38 35 5 (set (reg/i:SI 0 r0)
        (reg:SI 24 [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 5, registers live:
 (nil)

;; Start of basic block 6, registers live: (nil)
(code_label 35 30 39 6 5 "" [1 uses])

(note 39 35 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 36 39 0 6 (use (reg/i:SI 0 r0)) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 (nil)

